version: "3"
services:

  api-gateway:
    image: api-gateway:0.0.1-SNAPSHOT
    ports:
     - "8080:8080"
    networks:
      - bridge_network
  
  user-service:
    image: user-service:0.0.1-SNAPSHOT
    ports:
     - "8081:8080"
    networks:
      - bridge_network
  
  garage-service:
    image: garage-service:0.0.1-SNAPSHOT
    ports:
     - "8082:8080"
    networks:
      - bridge_network
  
  vehicle-service:
    image: vehicle-service:${VERSION}
    ports:
     - "8083:8080"
    networks:
      - bridge_network
  
  recommendation-service:
    image: recommendation-service:0.0.1-SNAPSHOT
    ports:
     - "8084:8080"
    networks:
      - bridge_network
  
  notification-service:
    image: notification-service:0.0.1-SNAPSHOT
    ports:
     - "8085:8080"
    networks:
      - bridge_network
  
    # enviroment:
    #   SERVICE_TAGS:         "database,nosql"###



  # user-service:
  #   build:
  #     context: ./spring_apps/user-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8081:8080"
  #   enviroment:
      # SERVICE_TAGS:         "database,nosql"###

  # vehicle-service:
  #   build:
  #     context: ./spring_apps/vechicle-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8080"
  #   enviroment:
        # SERVICE_TAGS:         "database,nosql"###

  # garage-service:
  #   build:
  #     context: ./spring_apps/garage-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8083:8080"
  #   enviroment:
      # SERVICE_TAGS:         "database,nosql"###

  # recommendation-service:
  #   build:
  #     context: ./spring_apps/recommendation-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8084:8080"
  #   enviroment:
      # SERVICE_TAGS:         "database,nosql"###

  # notification-service:
  #   build:
  #     context: ./spring_apps/notification-service 
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8085:8080"
  #   enviroment:
      # SERVICE_TAGS:         "database,nosql"###

  # registrator:
  #   image: gliderlabs/registrator:latest
  #   container_name: registrator
  #   volumes:
  #     - "/var/run/docker.sock:/tmp/docker.sock" # Registrator monitoruje kontenery Dockera
  #   command: consul://127.0.0.1:8500 -interval 10        
  #   depends_on:
  #     - consul

  # consul:
  #   image: consul:latest
  #   container_name: consul
  #   ports:
  #     - "8500:8500"
  #     - "8600:8600/udp"
  #   command: agent -dev -client=0.0.0.0

networks:
  bridge_network:
    driver: bridge
    external: true

volumes:
  data:

