stages:
  - build
  - dockerize
  - test
  - deploy
  - release

# Build frontend
build_frontend:
  stage: build
  image: node:20-alpine
  script:
    - cd frontend
    - export NODE_ENV=production   # Ustawienie NODE_ENV na production, aby build był zoptymalizowany
    - npm install                  # Instalacja zależności
    - npm run build                # Budowanie aplikacji
  artifacts:
    paths:
      - frontend/.next             # Zapisz wynik builda (folder .next)
      - frontend/package.json      # Zapisz plik package.json (potrzebny do dockerize)
      - frontend/package-lock.json # Zapisz plik package-lock.json (potrzebny do dockerize)
    expire_in: 1 day

# Dockerize frontend
dockerize_frontend:
  stage: dockerize
  script:
    - cd frontend
    - VERSION=$(node -p "require('./package.json').version")   # Pobierz wersję z package.json
    - docker build -f Dockerfile -t frontend_client:${VERSION}_commit_${CI_COMMIT_SHA} -t frontend_client:latest .  # Zbuduj obraz frontendowy
  needs:
    - build_frontend

# Deploy frontend services
deploy_services:
  stage: deploy
  script:
    - cd frontend
    - docker compose -f docker-compose.yml up -d  # Uruchom aplikację w kontenerach
  needs:
    - dockerize_frontend
